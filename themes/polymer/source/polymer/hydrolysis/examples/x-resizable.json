{
  "modules": [
    {
      "is": "x-resizable",
      "desc": "`Polymer.CoreResizable` and `Polymer.CoreResizer` are a set of mixins that can be used\n  in Polymer elements to coordinate the flow of resize events between 'resizers' (elements\n  that control the size or hidden state of their children) and 'resizables' (elements that\n  need to be notified when they are resized or un-hidden by their parents in order to take\n  action on their new measurements).\n  Elements that perform measurement should add the `Core.Resizable` mixin to their \n  Polymer prototype definition and listen for the `core-resize` event on themselves.\n  This event will be fired when they become showing after having been hidden,\n  when they are resized explicitly by a `CoreResizer`, or when the window has been resized.\n  Note, the `core-resize` event is non-bubbling.\n  `CoreResizable`'s must manually call the `resizableAttached` from the element's\n  `attached` callback and `resizableDetached` from the element's `detached`\n  callback.",
      "methods": {
        "resizableAttached": {
          "desc": "User must call from `attached` callback",
          "args": [
            "cb"
          ]
        },
        "resizableDetached": {
          "desc": "User must call from `detached` callback"
        },
        "_notifyResizeSelf": {
          "desc": "fire non-bubbling resize event to self; returns whether preventDefault was called, indicating that children should not be resized",
          "private": true
        }
      }
    },
    {
      "is": "x-resizer",
      "desc": "`Polymer.CoreResizable` and `Polymer.CoreResizer` are a set of mixins that can be used\n in Polymer elements to coordinate the flow of resize events between 'resizers' (elements\n that control the size or hidden state of their children) and 'resizables' (elements that\n need to be notified when they are resized or un-hidden by their parents in order to take\n action on their new measurements).\n Elements that cause their children to be resized (e.g. a splitter control) or hide/show\n their children (e.g. overlay) should add the `Core.CoreResizer` mixin to their \n Polymer prototype definition and then call `this.notifyResize()` any time the element\n resizes or un-hides its children.\n `CoreResizer`'s must manually call the `resizerAttached` from the element's\n `attached` callback and `resizerDetached` from the element's `detached`\n callback.\n Note: `CoreResizer` extends `CoreResizable`, and can listen for the `core-resize` event\n on itself if it needs to perform resize work on itself before notifying children.\n In this case, returning `false` from the `core-resize` event handler (or calling\n `preventDefault` on the event) will prevent notification of children if required.",
      "using": [
        "Base",
        "x-resizable"
      ],
      "extends": "x-resizable",
      "methods": {
        "resizerAttached": {
          "desc": "User must call from `attached` callback"
        },
        "resizerDetached": {
          "desc": "User must call from `detached` callback"
        },
        "notifyResize": {
          "desc": "User should call when resizing or un-hiding children"
        }
      }
    }
  ],
  "elements": []
}
